env S3_BUCKET_NAME;
env AWS_SECRET_ACCESS_KEY;
env AWS_ACCESS_KEY_ID;
env S3_REGION;
env KEY_PREFIX;

events {
}

http {
  include mgmt.nginx.conf;

  resolver __ENV__RESOLVER_ADDRESS ipv6=off valid=10s;

  lua_package_cpath "$prefix/resty_modules/lualib/?.so;;";
  lua_package_path "/lua-resty-hmac/lib/?.lua;;/usr/local/openresty/site/lualib/?.lua;;";

  client_max_body_size 100M;
  proxy_ignore_client_abort on;

  server {
    listen __ENV__PORT;

    location / {

      set_by_lua $aws_access_key "return os.getenv('AWS_ACCESS_KEY_ID')";
      set_by_lua $aws_secret_key "return os.getenv('AWS_SECRET_ACCESS_KEY')";
      set_by_lua $region "return os.getenv('S3_REGION')";
      set_by_lua $bucket "return os.getenv('S3_BUCKET_NAME')";
      set_by_lua $key_prefix "return os.getenv('KEY_PREFIX')";

      set_by_lua_block $aws_datetime {
          local now = ngx.now()
          local timestamp = os.date("!%Y%m%dT%H%M%SZ", now)
          return timestamp
      }

      set_by_lua_block $eight_digit_date {
          local now = ngx.now()
          local year = os.date("!%Y", now)
          local month = os.date("!%m", now)
          local day = os.date("!%d", now)

          return year .. month .. day
      }

      set $key $request_uri;

      set $canonical_headers "host:__ENV__S3_ENDPOINT\nx-amz-content-sha256:UNSIGNED-PAYLOAD\nx-amz-date:$aws_datetime\n";
      set $canonical_uri "/$bucket/$key_prefix$key";
      set $signed_headers "host;x-amz-content-sha256;x-amz-date";
      set $canonical_request "$request_method\n$canonical_uri\n\n$canonical_headers\n$signed_headers\nUNSIGNED-PAYLOAD";

      set_by_lua_block $hashed_canonical_request {
          local resty_str = require "resty.string"
          local sha256 = require "resty.sha256"
          local hasher = sha256:new()
          hasher:update(ngx.var.canonical_request)
          local hash_hex = resty_str.to_hex(hasher:final())
          return hash_hex
      }

      set $string_to_sign "AWS4-HMAC-SHA256\n$aws_datetime\n$eight_digit_date/$region/s3/aws4_request\n$hashed_canonical_request";

      set_by_lua_block $signing_key {
          local hmac = require "resty.hmac"

          local function hmac_sha256(key, data)
              local h = hmac:new(key, hmac.ALGOS.SHA256)
              h:update(data)
              local result =  h:final()
              h:reset()
              return result
          end

          local k_secret = "AWS4" .. ngx.var.aws_secret_key
          local k_date = hmac_sha256(k_secret, ngx.var.eight_digit_date)
          local k_region = hmac_sha256(k_date, ngx.var.region)
          local k_service = hmac_sha256(k_region, "s3")
          local k_signing = hmac_sha256(k_service, "aws4_request")

          return k_signing
      }

      set_by_lua_block $aws_signature {
        local str = require "resty.string"
        local hmac = require "resty.hmac"
        local sha256 = hmac:new(ngx.var.signing_key, hmac.ALGOS.SHA256)
        sha256:update(ngx.var.string_to_sign)
        return str.to_hex(sha256:final())
      }

      set $auth "AWS4-HMAC-SHA256 Credential=$aws_access_key/$eight_digit_date/$region/s3/aws4_request,SignedHeaders=$signed_headers,Signature=$aws_signature";

      proxy_pass_request_headers off;
      proxy_set_header x-amz-date $aws_datetime;
      proxy_set_header Authorization $auth;
      proxy_set_header Host __ENV__S3_ENDPOINT;
      proxy_set_header x-amz-content-sha256 UNSIGNED-PAYLOAD;

      # keep alive connection
      proxy_http_version 1.1;
      proxy_set_header Connection '';

      rewrite /(.*) /$bucket/$key_prefix/$1 break;
      proxy_pass __ENV__S3_PROTOCOL://__ENV__S3_ENDPOINT;
    }
  }
}
